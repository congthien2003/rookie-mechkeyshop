@model Shared.ViewModels.ProductModel;
@using Markdig
@using Newtonsoft.Json
@{
    ViewBag.Title = "Product Detail";
    var description = Markdown.ToHtml(Model.Description);
}

@section Scripts {
    <script>
        // document.getElementById("btnSubmitReview").addEventListener("click", function (e) {
        //     showLoginModal();
        // });



        const rating = document.querySelectorAll(".star-rating");
        console.log(rating);
        const inputRating = document.getElementById("inputRating");
        console.log({ inputRating });

        function updateUIStar(score) {
            rating.forEach((s) => {
                s.classList.remove("fa-solid");
                s.classList.add("fa-regular");
            });
            for (let i = 0; i < score; i++) {
                rating[i].classList.remove("fa-regular");
                rating[i].classList.add("fa-solid");
            }
        }

        rating.forEach((s) => {
            s.addEventListener('click', (event) => {
                console.log(event.target.dataset['score']);
                const score = Number.parseInt(event.target.dataset['score']);
                updateUIStar(score);
                inputRating.value = score;

            })
        })

        var option = undefined;

        const chooseOption = function (event) {
            console.log(event.target);
            const btnOptions = document.querySelectorAll('.btn-options');
            btnOptions.forEach((btn) => {
                btn.classList.remove('active');
            });
            event.target.classList.add('active');
            option = {
               id: event.target.getAttribute('data-variant-id'),
               value: event.target.getAttribute('data-variant-value')
            }

        }

        const btnAddToCartDetail = document.getElementById('btn-add-to-cart-detail');
        btnAddToCartDetail.addEventListener('click', function (event) {
            event.preventDefault();
            const productId = this.getAttribute('data-product-id');
            const quantity = Number.parseInt(this.getAttribute('data-quantity'));
            const imageUrl = this.getAttribute('data-product-imageurl');
            const price = this.getAttribute('data-product-price');
            const productName = this.getAttribute('data-product-name');
            const data = { productId, productName, quantity, price, option, imageUrl };
            addToCart(data);
            console.log(data);
        });

    </script>
}

<div class="modal fade" id="loginRequiredModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="loginRequiredModal">Can't write review now !</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Please Login to write review
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <a class="btn btn-primary" asp-action="Login" asp-controller="Auth">Login now!</a>
            </div>
        </div>
    </div>
</div>

<div class="container mt-4">
    <h2 class="title-section">Product Details</h2>
    <div class="detail--wrapper">
        <!-- Left: Image -->
        <div class="text-center detail-img bg-light">
            <img id="product-img" src="@Model.ImageUrl" alt="@Model.Name" class="img-fluid rounded shadow" style="max-height: 400px;" />
        </div>

        <!-- Right: Info -->
        <div class="detail-info">
            <p class="mb-1 name">@Model.Name</p>
            <p class="mb-1 text-muted">@Model.CategoryName</p>
            <div class="mb-2">
                <div class="d-flex align-items-center gap-2">

                    @for (var star = 1; star <= Math.Ceiling(Model.TotalRating); star++)
                    {
                        <i class="fa-solid fa-star"></i>
                    }

                    @{
                        var emptyStar = 5 - Math.Ceiling(Model.TotalRating);
                                        @for (var star = 1; star <= emptyStar; star++)
                        {
                                            <i class="fa-regular fa-star"></i>
                        }
                    }
                    <span class="rating-number text-muted"> (@Model.Rating.Count() customer reviews)</span>
                </div>
            </div>

            <p id="product-price" class="price mb-2">Price: $@Model.Price</p>

            <div id="variant-options">
                @if (Model.Variants != null)
                {
                    var grouped = Model.Variants
                    .GroupBy(attr => attr.Name)
                    .ToDictionary(g => g.Key, g => g.Select(x => x.Value).Distinct().ToList());
                    foreach (var group in grouped)
                    {
                        <span>
                            <label class="variants">@group.Key</label>
                        </span>
                        foreach (var value in group.Value)
                        {
                            <button 
                                class="btn-options me-2"
                                onclick="chooseOption(event)"
                                data-variant-id="@group.Key"
                                data-variant-value="@value"
                            >
                                    @value
                            </button>
                        }
                    }
                }
            </div>
            <div class="d-flex gap-3 mt-4">

                <button id="btn-add-to-cart-detail"
                        class="btn btn-gradient-blue-purple"
                        data-quantity=1
                        data-product-id="@Model.Id"
                        data-product-name="@Model.Name"
                        data-product-imageurl="@Model.ImageUrl"
                        data-product-price="@Model.Price"
                        >
                    <i class="fa-solid fa-cart-plus"></i> Add to Cart
                </button>
                <button class="btn btn-outline-danger">
                    <i class="fa-solid fa-heart"></i> Favorite
                </button>

            </div>
        </div>

    </div>
</div>
<div class="detail--expand">
    <div class="container description--wrapper">
        <h3>Description</h3>
        <div class="description">
            @Html.Raw(description)
        </div>
    </div>
    <div class="container reviews d-flex justify-content-between">
        <div class="w-50 p-4">
            <h3>Customer Reviews</h3>

            <ul class="list-review">
                @foreach (var rating in Model.Rating)
                {
                    <li class="review-items">
                        <div class="d-flex align-items-center justify-content-between">

                            <h4 class="review-name">@rating.Name</h4>
                            <div class="review-star">
                                <div class="d-flex align-items-center gap-2">
                                    @for (var star = 1; star <= rating.Stars; star++)
                                    {
                                        <i class="fa-solid fa-star"></i>
                                    }

                                    @{
                                        int emptyStarItems = 5 - rating.Stars;
                                                        @for (var star = 1; star <= emptyStarItems; star++)
                                        {
                                                            <i class="fa-regular fa-star"></i>
                                        }
                                    }

                                </div>
                                
                            </div>

                        </div>

                        <p class="review-description">
                            @rating.Comment
                        </p>
                        <p class="text-muted mt-1"> @rating.RatedAt.ToLocalTime() </p>

                    </li>
                }
            </ul>
        </div>

        <div class="w-50 write-review p-4">
            <h3>Write a review</h3>
            <form class="mt-2" method="post" asp-action="SubmitRating" asp-controller="Product" asp-route-id=@Model.Id>
                <input for="id" type="text" value=@Model.Id hidden />
                <input for="score" name="score" id="inputRating" type="number" min="1" max="5" hidden />
                <div class="mb-3">
                    <label>Rating</label>
                    <div class="d-flex align-items-center gap-4 mt-3">
                        <i class="fa-regular fa-star star-rating" data-score=1></i>
                        <i class="fa-regular fa-star star-rating" data-score=2></i>
                        <i class="fa-regular fa-star star-rating" data-score=3></i>
                        <i class="fa-regular fa-star star-rating" data-score=4></i>
                        <i class="fa-regular fa-star star-rating" data-score=5></i>
                    </div>
                </div>
                <div class="mb-3">
                    <label for="comment" class="form-label">Description</label>
                    <textarea class="form-control" id="comment" name="comment" rows="3"></textarea>
                </div>

                @{
                    var isLoggedIn = !string.IsNullOrEmpty(Context.Request.Cookies["accessToken"]);
                                    @if (isLoggedIn)
                    {
                                        <button type="submit" class="btn btn-gradient-blue-purple w-100">Submit</button>
                    }
                    else
                    {
                                        <button id="btnSubmitReview" type="button" class="btn btn-gradient-blue-purple w-100" data-bs-toggle="modal" data-bs-target="#loginRequiredModal">Submit</button>
                    }
                }

            </form>
        </div>

    </div>



</div>

<style>
    .title-section {
        font-size: 28px;
        font-weight: bold;
        padding-bottom: 1rem;
        border-bottom: 1px solid #efefef;
    }

    .description--wrapper {
        padding: 3rem 2rem;
        border-bottom: 1px solid #cecece;
    }

        .description--wrapper h3 {
            font-size: 18px;
            font-weight: bold;
        }

    .detail--expand {
        margin-top: 40px;
        padding: 2rem 4rem;
        background-color: #efefef;
    }

    .reviews {
        gap: 80px;
    }

    .list-review {
        display: flex;
        flex-direction: column;
        gap: 24px;
        scrollbar-width: thin;
    }

    .reviews h3,
    .write-review h3 {
        font-size: 18px;
        font-weight: bold;
    }

    .review-items {
        padding: 0.5rem 1rem;
        border: 1px solid #cecece;
        border-radius: 12px;
    }

        .review-items:hover {
            background-color: #f5f5f5;
        }

    .review-name {
        font-size: 18px;
    }

    .review-description {
        font-size: 16px;
    }

    .star-rating:hover {
        transform: scale(110%);
    }

    .star-rating {
        transition: all 0.2s ease-in;
    }

    .variants {
        display: flex;
        align-items: center;
        margin: 12px 0px;
        gap: 12px;
    }

    .variants label {
        font-weight: 500;
        font-size: 16px;
    }

    .btn-options {
        padding: 4px 6px;
        border-radius: 4px;
        font-size: 14px;
        opacity: 0.8;
        border: 2px solid #cecece;
        transition: all 0.2s ease-in-out;
    }

    .btn-options:hover {
            background-color: cornflowerblue;
            color: white;
            border-color: cornflowerblue;
            opacity: 1;
        }

    .btn-options.active {
        background-color: cornflowerblue;
        color: white;
        border-color: cornflowerblue;
        opacity: 1;
        outline: none;
    }
</style>
